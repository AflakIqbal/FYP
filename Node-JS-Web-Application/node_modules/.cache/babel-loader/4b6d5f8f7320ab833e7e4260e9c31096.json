{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, USER_IS_ADMIN } from './types'; // Load User\n\nexport const loadAdmin = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  const userType = localStorage.getItem('userType');\n\n  try {\n    const res = await axios.get('/api/Admin/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n    dispatch({\n      type: USER_IS_ADMIN\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nexport const register = ({\n  name,\n  email,\n  password,\n  cellPhone,\n  address,\n  officeLocation,\n  photo\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    cellPhone,\n    address,\n    officeLocation\n  });\n\n  try {\n    const res = await axios.post('/api/Admin/register', body, config);\n    console.log('photo', photo);\n    console.log('photo', cellPhone);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadAdmin());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/Admin/auth/login', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadAdmin());\n    dispatch({\n      type: USER_IS_ADMIN\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // logout / clear\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["D:/Study/FYP/Sawari/Sawari/client/src/actions/Admin/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","USER_IS_ADMIN","loadAdmin","dispatch","localStorage","token","userType","getItem","res","get","type","payload","data","err","register","name","email","password","cellPhone","address","officeLocation","photo","config","headers","body","JSON","stringify","post","console","log","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n  USER_IS_ADMIN\r\n} from './types';\r\n\r\n// Load User\r\nexport const loadAdmin = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  const userType = localStorage.getItem('userType');\r\n\r\n  try {\r\n    const res = await axios.get('/api/Admin/auth');\r\n\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n    dispatch({ type: USER_IS_ADMIN });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n//register user\r\nexport const register = ({\r\n  name,\r\n  email,\r\n  password,\r\n  cellPhone,\r\n  address,\r\n  officeLocation,\r\n  photo\r\n}) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({\r\n    name,\r\n    email,\r\n    password,\r\n    cellPhone,\r\n    address,\r\n    officeLocation\r\n  });\r\n\r\n  try {\r\n    const res = await axios.post('/api/Admin/register', body, config);\r\n    console.log('photo', photo);\r\n    console.log('photo', cellPhone);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadAdmin());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n//Login user\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({\r\n    email,\r\n    password\r\n  });\r\n\r\n  try {\r\n    const res = await axios.post('/api/Admin/auth/login', body, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadAdmin());\r\n    dispatch({ type: USER_IS_ADMIN });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// logout / clear\r\nexport const logout = () => dispatch => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}