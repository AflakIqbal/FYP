{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types'; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n};\nimport { setAlert } from './alert'; //register user\n\nexport const register = ({\n  name,\n  email,\n  password,\n  cellPhone,\n  address,\n  officeLocation,\n  city\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    cellPhone,\n    address,\n    officeLocation,\n    city\n  });\n\n  try {\n    const res = await axios.post('/api/subAdmin/register', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["D:/Study/FYP/Sawari/Sawari/client/src/actions/auth.js"],"names":["axios","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","loadUser","dispatch","localStorage","token","setAlert","register","name","email","password","cellPhone","address","officeLocation","city","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,QAKO,SALP,C,CAOA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBR,IAAAA,YAAY,CAACO,YAAY,CAACC,KAAd,CAAZ;AACD;AACF,CAJM;AAMP,SAASC,QAAT,QAAyB,SAAzB,C,CACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AACvBC,EAAAA,IADuB;AAEvBC,EAAAA,KAFuB;AAGvBC,EAAAA,QAHuB;AAIvBC,EAAAA,SAJuB;AAKvBC,EAAAA,OALuB;AAMvBC,EAAAA,cANuB;AAOvBC,EAAAA;AAPuB,CAAD,KAQlB,MAAMX,QAAN,IAAkB;AACtB,QAAMY,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BX,IAAAA,IAD0B;AAE1BC,IAAAA,KAF0B;AAG1BC,IAAAA,QAH0B;AAI1BC,IAAAA,SAJ0B;AAK1BC,IAAAA,OAL0B;AAM1BC,IAAAA,cAN0B;AAO1BC,IAAAA;AAP0B,GAAf,CAAb;;AAUA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMxB,KAAK,CAACyB,IAAN,CAAW,wBAAX,EAAqCJ,IAArC,EAA2CF,MAA3C,CAAlB;AACAZ,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,IAAI,EAAExB,gBADC;AAEPyB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI1B,QAAQ,CAACG,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACD;;AAED3B,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,IAAI,EAAEvB;AADC,KAAD,CAAR;AAGD;AACF,CAzCM","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR\r\n} from './types';\r\n\r\n// Load User\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n};\r\n\r\nimport { setAlert } from './alert';\r\n//register user\r\nexport const register = ({\r\n  name,\r\n  email,\r\n  password,\r\n  cellPhone,\r\n  address,\r\n  officeLocation,\r\n  city\r\n}) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      'content-Type': 'application/json'\r\n    }\r\n  };\r\n  const body = JSON.stringify({\r\n    name,\r\n    email,\r\n    password,\r\n    cellPhone,\r\n    address,\r\n    officeLocation,\r\n    city\r\n  });\r\n\r\n  try {\r\n    const res = await axios.post('/api/subAdmin/register', body, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}